/*
 * Created on 2022-03-14 ( Date ISO 2022-03-14 - Time 18:56:11 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.3.0
*/
package org.demo.controller;

import org.demo.controller.assembler.ReviewResourceAssembler;
import org.demo.controller.resource.ReviewResource;
import org.demo.entity.Review;
import org.demo.service.ReviewServiceImpl;
import org.demo.service.criteria.ReviewCriteria;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PagedResourcesAssembler;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * Rest controller which produce Hal+json content (including hateoas metadata).
 * @author Telosys (http://www.telosys.org/) version 3.3.0
 */
@RestController
@RequestMapping(value = "/review", produces = "application/hal+json")
public class ReviewController {

	private static final Logger LOGGER = LoggerFactory.getLogger(ReviewController.class);

	private static final String NOT_FOUND ="Review not found";

	@Autowired
	private ReviewServiceImpl reviewService;

	@Autowired
	private PagedResourcesAssembler<Review> pageAssember;

	private ReviewResourceAssembler reviewResourceAssembler = new ReviewResourceAssembler();

	@GetMapping
	public ResponseEntity<PagedResources<ReviewResource>> search(Pageable pageable, ReviewCriteria criteria) {
		LOGGER.info("Reviews search [pageable={}|ReviewCriteria={}", pageable, criteria);
		final Page<Review> result = reviewService.search(pageable, criteria);
		LOGGER.info("Found {} reviews !", result.getSize());
		return new ResponseEntity<>(pageAssember.toResource(result, reviewResourceAssembler), HttpStatus.OK);
	}

	@GetMapping("{customerCode}/{bookId}")
	public ResponseEntity<ReviewResource> get(@PathVariable("customerCode") String customerCode, @PathVariable("bookId") Integer bookId) {
		LOGGER.info("Review get with id {}", resolveIdForLogger(customerCode, bookId));
		final Review review = reviewService.get(customerCode, bookId);
		if (review == null) {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>((ReviewResource) null, HttpStatus.NOT_FOUND);
		}
		LOGGER.info("Review found : {}", review);
		final ReviewResource reviewResource = reviewResourceAssembler.toResource(review);
		return new ResponseEntity<>(reviewResource, HttpStatus.OK);
	}

	@PostMapping(consumes = "application/json")
	public ResponseEntity<ReviewResource> create(@RequestBody Review review) {
		LOGGER.info("Review creation request : {}", review);
		if (reviewService.exist(review)) {
			LOGGER.info("Review already exist ! : {}", review);
			return new ResponseEntity<>((ReviewResource) null, HttpStatus.CONFLICT);
		} else {
			final Review created = reviewService.create(review);
			LOGGER.info("Created review {}", created);
			return new ResponseEntity<>(reviewResourceAssembler.toResource(created), HttpStatus.OK);
		}
	}

	@PutMapping(value = "{customerCode}/{bookId}", consumes = "application/json")
	public ResponseEntity<Void> update(@PathVariable("customerCode") String customerCode, @PathVariable("bookId") Integer bookId, @RequestBody Review review) {
		LOGGER.info("Review update request [id={} | review={}}", resolveIdForLogger(customerCode, bookId), review);
		// force the id (use the id provided by the URL)
		review.setCustomerCode(customerCode);
		review.setBookId(bookId);
		if (reviewService.save(review)) {
			LOGGER.info("Review succesfully updated");
			return new ResponseEntity<>(HttpStatus.OK);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	@DeleteMapping("{customerCode}/{bookId}")
	public ResponseEntity<Void> delete(@PathVariable("customerCode") String customerCode, @PathVariable("bookId") Integer bookId) {
		LOGGER.info("Review deletion request : {}", resolveIdForLogger(customerCode, bookId));
		if (reviewService.delete(customerCode, bookId)) {
			LOGGER.info("Review succesfully deleted");
			return new ResponseEntity<>(HttpStatus.NO_CONTENT);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	private String resolveIdForLogger(String customerCode, Integer bookId) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(customerCode));
		ids.append("/");
		ids.append(String.valueOf(bookId));
		return ids.toString();
	}

}
