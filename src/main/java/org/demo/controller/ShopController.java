/*
 * Created on 2022-03-14 ( Date ISO 2022-03-14 - Time 18:56:12 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.3.0
*/
package org.demo.controller;

import org.demo.controller.assembler.ShopResourceAssembler;
import org.demo.controller.resource.ShopResource;
import org.demo.entity.Shop;
import org.demo.service.ShopServiceImpl;
import org.demo.service.criteria.ShopCriteria;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PagedResourcesAssembler;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * Rest controller which produce Hal+json content (including hateoas metadata).
 * @author Telosys (http://www.telosys.org/) version 3.3.0
 */
@RestController
@RequestMapping(value = "/shop", produces = "application/hal+json")
public class ShopController {

	private static final Logger LOGGER = LoggerFactory.getLogger(ShopController.class);

	private static final String NOT_FOUND ="Shop not found";

	@Autowired
	private ShopServiceImpl shopService;

	@Autowired
	private PagedResourcesAssembler<Shop> pageAssember;

	private ShopResourceAssembler shopResourceAssembler = new ShopResourceAssembler();

	@GetMapping
	public ResponseEntity<PagedResources<ShopResource>> search(Pageable pageable, ShopCriteria criteria) {
		LOGGER.info("Shops search [pageable={}|ShopCriteria={}", pageable, criteria);
		final Page<Shop> result = shopService.search(pageable, criteria);
		LOGGER.info("Found {} shops !", result.getSize());
		return new ResponseEntity<>(pageAssember.toResource(result, shopResourceAssembler), HttpStatus.OK);
	}

	@GetMapping("{code}")
	public ResponseEntity<ShopResource> get(@PathVariable("code") String code) {
		LOGGER.info("Shop get with id {}", resolveIdForLogger(code));
		final Shop shop = shopService.get(code);
		if (shop == null) {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>((ShopResource) null, HttpStatus.NOT_FOUND);
		}
		LOGGER.info("Shop found : {}", shop);
		final ShopResource shopResource = shopResourceAssembler.toResource(shop);
		return new ResponseEntity<>(shopResource, HttpStatus.OK);
	}

	@PostMapping(consumes = "application/json")
	public ResponseEntity<ShopResource> create(@RequestBody Shop shop) {
		LOGGER.info("Shop creation request : {}", shop);
		if (shopService.exist(shop)) {
			LOGGER.info("Shop already exist ! : {}", shop);
			return new ResponseEntity<>((ShopResource) null, HttpStatus.CONFLICT);
		} else {
			final Shop created = shopService.create(shop);
			LOGGER.info("Created shop {}", created);
			return new ResponseEntity<>(shopResourceAssembler.toResource(created), HttpStatus.OK);
		}
	}

	@PutMapping(value = "{code}", consumes = "application/json")
	public ResponseEntity<Void> update(@PathVariable("code") String code, @RequestBody Shop shop) {
		LOGGER.info("Shop update request [id={} | shop={}}", resolveIdForLogger(code), shop);
		// force the id (use the id provided by the URL)
		shop.setCode(code);
		if (shopService.save(shop)) {
			LOGGER.info("Shop succesfully updated");
			return new ResponseEntity<>(HttpStatus.OK);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	@DeleteMapping("{code}")
	public ResponseEntity<Void> delete(@PathVariable("code") String code) {
		LOGGER.info("Shop deletion request : {}", resolveIdForLogger(code));
		if (shopService.delete(code)) {
			LOGGER.info("Shop succesfully deleted");
			return new ResponseEntity<>(HttpStatus.NO_CONTENT);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	private String resolveIdForLogger(String code) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(code));
		return ids.toString();
	}

}
