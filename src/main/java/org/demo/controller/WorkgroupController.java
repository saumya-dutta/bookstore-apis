/*
 * Created on 2022-03-14 ( Date ISO 2022-03-14 - Time 18:56:12 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.3.0
*/
package org.demo.controller;

import org.demo.controller.assembler.WorkgroupResourceAssembler;
import org.demo.controller.resource.WorkgroupResource;
import org.demo.entity.Workgroup;
import org.demo.service.WorkgroupServiceImpl;
import org.demo.service.criteria.WorkgroupCriteria;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PagedResourcesAssembler;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * Rest controller which produce Hal+json content (including hateoas metadata).
 * @author Telosys (http://www.telosys.org/) version 3.3.0
 */
@RestController
@RequestMapping(value = "/workgroup", produces = "application/hal+json")
public class WorkgroupController {

	private static final Logger LOGGER = LoggerFactory.getLogger(WorkgroupController.class);

	private static final String NOT_FOUND ="Workgroup not found";

	@Autowired
	private WorkgroupServiceImpl workgroupService;

	@Autowired
	private PagedResourcesAssembler<Workgroup> pageAssember;

	private WorkgroupResourceAssembler workgroupResourceAssembler = new WorkgroupResourceAssembler();

	@GetMapping
	public ResponseEntity<PagedResources<WorkgroupResource>> search(Pageable pageable, WorkgroupCriteria criteria) {
		LOGGER.info("Workgroups search [pageable={}|WorkgroupCriteria={}", pageable, criteria);
		final Page<Workgroup> result = workgroupService.search(pageable, criteria);
		LOGGER.info("Found {} workgroups !", result.getSize());
		return new ResponseEntity<>(pageAssember.toResource(result, workgroupResourceAssembler), HttpStatus.OK);
	}

	@GetMapping("{id}")
	public ResponseEntity<WorkgroupResource> get(@PathVariable("id") Short id) {
		LOGGER.info("Workgroup get with id {}", resolveIdForLogger(id));
		final Workgroup workgroup = workgroupService.get(id);
		if (workgroup == null) {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>((WorkgroupResource) null, HttpStatus.NOT_FOUND);
		}
		LOGGER.info("Workgroup found : {}", workgroup);
		final WorkgroupResource workgroupResource = workgroupResourceAssembler.toResource(workgroup);
		return new ResponseEntity<>(workgroupResource, HttpStatus.OK);
	}

	@PostMapping(consumes = "application/json")
	public ResponseEntity<WorkgroupResource> create(@RequestBody Workgroup workgroup) {
		LOGGER.info("Workgroup creation request : {}", workgroup);
		if (workgroupService.exist(workgroup)) {
			LOGGER.info("Workgroup already exist ! : {}", workgroup);
			return new ResponseEntity<>((WorkgroupResource) null, HttpStatus.CONFLICT);
		} else {
			final Workgroup created = workgroupService.create(workgroup);
			LOGGER.info("Created workgroup {}", created);
			return new ResponseEntity<>(workgroupResourceAssembler.toResource(created), HttpStatus.OK);
		}
	}

	@PutMapping(value = "{id}", consumes = "application/json")
	public ResponseEntity<Void> update(@PathVariable("id") Short id, @RequestBody Workgroup workgroup) {
		LOGGER.info("Workgroup update request [id={} | workgroup={}}", resolveIdForLogger(id), workgroup);
		// force the id (use the id provided by the URL)
		workgroup.setId(id);
		if (workgroupService.save(workgroup)) {
			LOGGER.info("Workgroup succesfully updated");
			return new ResponseEntity<>(HttpStatus.OK);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	@DeleteMapping("{id}")
	public ResponseEntity<Void> delete(@PathVariable("id") Short id) {
		LOGGER.info("Workgroup deletion request : {}", resolveIdForLogger(id));
		if (workgroupService.delete(id)) {
			LOGGER.info("Workgroup succesfully deleted");
			return new ResponseEntity<>(HttpStatus.NO_CONTENT);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Short id) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(id));
		return ids.toString();
	}

}
