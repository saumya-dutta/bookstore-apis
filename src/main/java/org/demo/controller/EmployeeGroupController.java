/*
 * Created on 2022-03-14 ( Date ISO 2022-03-14 - Time 18:56:11 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.3.0
*/
package org.demo.controller;

import org.demo.controller.assembler.EmployeeGroupResourceAssembler;
import org.demo.controller.resource.EmployeeGroupResource;
import org.demo.entity.EmployeeGroup;
import org.demo.service.EmployeeGroupServiceImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PagedResourcesAssembler;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * Rest controller which produce Hal+json content (including hateoas metadata).
 * @author Telosys (http://www.telosys.org/) version 3.3.0
 */
@RestController
@RequestMapping(value = "/employeeGroup", produces = "application/hal+json")
public class EmployeeGroupController {

	private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeGroupController.class);

	private static final String NOT_FOUND ="EmployeeGroup not found";

	@Autowired
	private EmployeeGroupServiceImpl employeeGroupService;

	@Autowired
	private PagedResourcesAssembler<EmployeeGroup> pageAssember;

	private EmployeeGroupResourceAssembler employeeGroupResourceAssembler = new EmployeeGroupResourceAssembler();

	@GetMapping
	public ResponseEntity<PagedResources<EmployeeGroupResource>> search(Pageable pageable) {
		LOGGER.info("EmployeeGroups search [pageable={}", pageable);
		final Page<EmployeeGroup> result = employeeGroupService.search(pageable);
		LOGGER.info("Found {} employeeGroups !", result.getSize());
		return new ResponseEntity<>(pageAssember.toResource(result, employeeGroupResourceAssembler), HttpStatus.OK);
	}

	@GetMapping("{employeeCode}/{groupId}")
	public ResponseEntity<EmployeeGroupResource> get(@PathVariable("employeeCode") String employeeCode, @PathVariable("groupId") Short groupId) {
		LOGGER.info("EmployeeGroup get with id {}", resolveIdForLogger(employeeCode, groupId));
		final EmployeeGroup employeeGroup = employeeGroupService.get(employeeCode, groupId);
		if (employeeGroup == null) {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>((EmployeeGroupResource) null, HttpStatus.NOT_FOUND);
		}
		LOGGER.info("EmployeeGroup found : {}", employeeGroup);
		final EmployeeGroupResource employeeGroupResource = employeeGroupResourceAssembler.toResource(employeeGroup);
		return new ResponseEntity<>(employeeGroupResource, HttpStatus.OK);
	}

	@PostMapping(consumes = "application/json")
	public ResponseEntity<EmployeeGroupResource> create(@RequestBody EmployeeGroup employeeGroup) {
		LOGGER.info("EmployeeGroup creation request : {}", employeeGroup);
		if (employeeGroupService.exist(employeeGroup)) {
			LOGGER.info("EmployeeGroup already exist ! : {}", employeeGroup);
			return new ResponseEntity<>((EmployeeGroupResource) null, HttpStatus.CONFLICT);
		} else {
			final EmployeeGroup created = employeeGroupService.create(employeeGroup);
			LOGGER.info("Created employeeGroup {}", created);
			return new ResponseEntity<>(employeeGroupResourceAssembler.toResource(created), HttpStatus.OK);
		}
	}

	@PutMapping(value = "{employeeCode}/{groupId}", consumes = "application/json")
	public ResponseEntity<Void> update(@PathVariable("employeeCode") String employeeCode, @PathVariable("groupId") Short groupId, @RequestBody EmployeeGroup employeeGroup) {
		LOGGER.info("EmployeeGroup update request [id={} | employeeGroup={}}", resolveIdForLogger(employeeCode, groupId), employeeGroup);
		// force the id (use the id provided by the URL)
		employeeGroup.setEmployeeCode(employeeCode);
		employeeGroup.setGroupId(groupId);
		if (employeeGroupService.save(employeeGroup)) {
			LOGGER.info("EmployeeGroup succesfully updated");
			return new ResponseEntity<>(HttpStatus.OK);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	@DeleteMapping("{employeeCode}/{groupId}")
	public ResponseEntity<Void> delete(@PathVariable("employeeCode") String employeeCode, @PathVariable("groupId") Short groupId) {
		LOGGER.info("EmployeeGroup deletion request : {}", resolveIdForLogger(employeeCode, groupId));
		if (employeeGroupService.delete(employeeCode, groupId)) {
			LOGGER.info("EmployeeGroup succesfully deleted");
			return new ResponseEntity<>(HttpStatus.NO_CONTENT);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	private String resolveIdForLogger(String employeeCode, Short groupId) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(employeeCode));
		ids.append("/");
		ids.append(String.valueOf(groupId));
		return ids.toString();
	}

}
