/*
 * Created on 2022-03-14 ( Date ISO 2022-03-14 - Time 18:56:11 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.3.0
*/
package org.demo.controller;

import org.demo.controller.assembler.CustomerResourceAssembler;
import org.demo.controller.resource.CustomerResource;
import org.demo.entity.Customer;
import org.demo.service.CustomerServiceImpl;
import org.demo.service.criteria.CustomerCriteria;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PagedResourcesAssembler;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * Rest controller which produce Hal+json content (including hateoas metadata).
 * @author Telosys (http://www.telosys.org/) version 3.3.0
 */
@RestController
@RequestMapping(value = "/customer", produces = "application/hal+json")
public class CustomerController {

	private static final Logger LOGGER = LoggerFactory.getLogger(CustomerController.class);

	private static final String NOT_FOUND ="Customer not found";

	@Autowired
	private CustomerServiceImpl customerService;

	@Autowired
	private PagedResourcesAssembler<Customer> pageAssember;

	private CustomerResourceAssembler customerResourceAssembler = new CustomerResourceAssembler();

	@GetMapping
	public ResponseEntity<PagedResources<CustomerResource>> search(Pageable pageable, CustomerCriteria criteria) {
		LOGGER.info("Customers search [pageable={}|CustomerCriteria={}", pageable, criteria);
		final Page<Customer> result = customerService.search(pageable, criteria);
		LOGGER.info("Found {} customers !", result.getSize());
		return new ResponseEntity<>(pageAssember.toResource(result, customerResourceAssembler), HttpStatus.OK);
	}

	@GetMapping("{code}")
	public ResponseEntity<CustomerResource> get(@PathVariable("code") String code) {
		LOGGER.info("Customer get with id {}", resolveIdForLogger(code));
		final Customer customer = customerService.get(code);
		if (customer == null) {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>((CustomerResource) null, HttpStatus.NOT_FOUND);
		}
		LOGGER.info("Customer found : {}", customer);
		final CustomerResource customerResource = customerResourceAssembler.toResource(customer);
		return new ResponseEntity<>(customerResource, HttpStatus.OK);
	}

	@PostMapping(consumes = "application/json")
	public ResponseEntity<CustomerResource> create(@RequestBody Customer customer) {
		LOGGER.info("Customer creation request : {}", customer);
		if (customerService.exist(customer)) {
			LOGGER.info("Customer already exist ! : {}", customer);
			return new ResponseEntity<>((CustomerResource) null, HttpStatus.CONFLICT);
		} else {
			final Customer created = customerService.create(customer);
			LOGGER.info("Created customer {}", created);
			return new ResponseEntity<>(customerResourceAssembler.toResource(created), HttpStatus.OK);
		}
	}

	@PutMapping(value = "{code}", consumes = "application/json")
	public ResponseEntity<Void> update(@PathVariable("code") String code, @RequestBody Customer customer) {
		LOGGER.info("Customer update request [id={} | customer={}}", resolveIdForLogger(code), customer);
		// force the id (use the id provided by the URL)
		customer.setCode(code);
		if (customerService.save(customer)) {
			LOGGER.info("Customer succesfully updated");
			return new ResponseEntity<>(HttpStatus.OK);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	@DeleteMapping("{code}")
	public ResponseEntity<Void> delete(@PathVariable("code") String code) {
		LOGGER.info("Customer deletion request : {}", resolveIdForLogger(code));
		if (customerService.delete(code)) {
			LOGGER.info("Customer succesfully deleted");
			return new ResponseEntity<>(HttpStatus.NO_CONTENT);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	private String resolveIdForLogger(String code) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(code));
		return ids.toString();
	}

}
