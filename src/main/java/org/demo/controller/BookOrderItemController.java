/*
 * Created on 2022-03-14 ( Date ISO 2022-03-14 - Time 18:56:08 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.3.0
*/
package org.demo.controller;

import org.demo.controller.assembler.BookOrderItemResourceAssembler;
import org.demo.controller.resource.BookOrderItemResource;
import org.demo.entity.BookOrderItem;
import org.demo.service.BookOrderItemServiceImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PagedResourcesAssembler;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * Rest controller which produce Hal+json content (including hateoas metadata).
 * @author Telosys (http://www.telosys.org/) version 3.3.0
 */
@RestController
@RequestMapping(value = "/bookOrderItem", produces = "application/hal+json")
public class BookOrderItemController {

	private static final Logger LOGGER = LoggerFactory.getLogger(BookOrderItemController.class);

	private static final String NOT_FOUND ="BookOrderItem not found";

	@Autowired
	private BookOrderItemServiceImpl bookOrderItemService;

	@Autowired
	private PagedResourcesAssembler<BookOrderItem> pageAssember;

	private BookOrderItemResourceAssembler bookOrderItemResourceAssembler = new BookOrderItemResourceAssembler();

	@GetMapping
	public ResponseEntity<PagedResources<BookOrderItemResource>> search(Pageable pageable) {
		LOGGER.info("BookOrderItems search [pageable={}", pageable);
		final Page<BookOrderItem> result = bookOrderItemService.search(pageable);
		LOGGER.info("Found {} bookOrderItems !", result.getSize());
		return new ResponseEntity<>(pageAssember.toResource(result, bookOrderItemResourceAssembler), HttpStatus.OK);
	}

	@GetMapping("{bookOrderId}/{bookId}")
	public ResponseEntity<BookOrderItemResource> get(@PathVariable("bookOrderId") Integer bookOrderId, @PathVariable("bookId") Integer bookId) {
		LOGGER.info("BookOrderItem get with id {}", resolveIdForLogger(bookOrderId, bookId));
		final BookOrderItem bookOrderItem = bookOrderItemService.get(bookOrderId, bookId);
		if (bookOrderItem == null) {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>((BookOrderItemResource) null, HttpStatus.NOT_FOUND);
		}
		LOGGER.info("BookOrderItem found : {}", bookOrderItem);
		final BookOrderItemResource bookOrderItemResource = bookOrderItemResourceAssembler.toResource(bookOrderItem);
		return new ResponseEntity<>(bookOrderItemResource, HttpStatus.OK);
	}

	@PostMapping(consumes = "application/json")
	public ResponseEntity<BookOrderItemResource> create(@RequestBody BookOrderItem bookOrderItem) {
		LOGGER.info("BookOrderItem creation request : {}", bookOrderItem);
		if (bookOrderItemService.exist(bookOrderItem)) {
			LOGGER.info("BookOrderItem already exist ! : {}", bookOrderItem);
			return new ResponseEntity<>((BookOrderItemResource) null, HttpStatus.CONFLICT);
		} else {
			final BookOrderItem created = bookOrderItemService.create(bookOrderItem);
			LOGGER.info("Created bookOrderItem {}", created);
			return new ResponseEntity<>(bookOrderItemResourceAssembler.toResource(created), HttpStatus.OK);
		}
	}

	@PutMapping(value = "{bookOrderId}/{bookId}", consumes = "application/json")
	public ResponseEntity<Void> update(@PathVariable("bookOrderId") Integer bookOrderId, @PathVariable("bookId") Integer bookId, @RequestBody BookOrderItem bookOrderItem) {
		LOGGER.info("BookOrderItem update request [id={} | bookOrderItem={}}", resolveIdForLogger(bookOrderId, bookId), bookOrderItem);
		// force the id (use the id provided by the URL)
		bookOrderItem.setBookOrderId(bookOrderId);
		bookOrderItem.setBookId(bookId);
		if (bookOrderItemService.save(bookOrderItem)) {
			LOGGER.info("BookOrderItem succesfully updated");
			return new ResponseEntity<>(HttpStatus.OK);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	@DeleteMapping("{bookOrderId}/{bookId}")
	public ResponseEntity<Void> delete(@PathVariable("bookOrderId") Integer bookOrderId, @PathVariable("bookId") Integer bookId) {
		LOGGER.info("BookOrderItem deletion request : {}", resolveIdForLogger(bookOrderId, bookId));
		if (bookOrderItemService.delete(bookOrderId, bookId)) {
			LOGGER.info("BookOrderItem succesfully deleted");
			return new ResponseEntity<>(HttpStatus.NO_CONTENT);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer bookOrderId, Integer bookId) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(bookOrderId));
		ids.append("/");
		ids.append(String.valueOf(bookId));
		return ids.toString();
	}

}
