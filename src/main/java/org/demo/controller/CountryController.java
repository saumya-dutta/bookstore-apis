/*
 * Created on 2022-03-14 ( Date ISO 2022-03-14 - Time 18:56:08 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.3.0
*/
package org.demo.controller;

import org.demo.controller.assembler.CountryResourceAssembler;
import org.demo.controller.resource.CountryResource;
import org.demo.entity.Country;
import org.demo.service.CountryServiceImpl;
import org.demo.service.criteria.CountryCriteria;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PagedResourcesAssembler;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * Rest controller which produce Hal+json content (including hateoas metadata).
 * @author Telosys (http://www.telosys.org/) version 3.3.0
 */
@RestController
@RequestMapping(value = "/country", produces = "application/hal+json")
public class CountryController {

	private static final Logger LOGGER = LoggerFactory.getLogger(CountryController.class);

	private static final String NOT_FOUND ="Country not found";

	@Autowired
	private CountryServiceImpl countryService;

	@Autowired
	private PagedResourcesAssembler<Country> pageAssember;

	private CountryResourceAssembler countryResourceAssembler = new CountryResourceAssembler();

	@GetMapping
	public ResponseEntity<PagedResources<CountryResource>> search(Pageable pageable, CountryCriteria criteria) {
		LOGGER.info("Countrys search [pageable={}|CountryCriteria={}", pageable, criteria);
		final Page<Country> result = countryService.search(pageable, criteria);
		LOGGER.info("Found {} countrys !", result.getSize());
		return new ResponseEntity<>(pageAssember.toResource(result, countryResourceAssembler), HttpStatus.OK);
	}

	@GetMapping("{code}")
	public ResponseEntity<CountryResource> get(@PathVariable("code") String code) {
		LOGGER.info("Country get with id {}", resolveIdForLogger(code));
		final Country country = countryService.get(code);
		if (country == null) {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>((CountryResource) null, HttpStatus.NOT_FOUND);
		}
		LOGGER.info("Country found : {}", country);
		final CountryResource countryResource = countryResourceAssembler.toResource(country);
		return new ResponseEntity<>(countryResource, HttpStatus.OK);
	}

	@PostMapping(consumes = "application/json")
	public ResponseEntity<CountryResource> create(@RequestBody Country country) {
		LOGGER.info("Country creation request : {}", country);
		if (countryService.exist(country)) {
			LOGGER.info("Country already exist ! : {}", country);
			return new ResponseEntity<>((CountryResource) null, HttpStatus.CONFLICT);
		} else {
			final Country created = countryService.create(country);
			LOGGER.info("Created country {}", created);
			return new ResponseEntity<>(countryResourceAssembler.toResource(created), HttpStatus.OK);
		}
	}

	@PutMapping(value = "{code}", consumes = "application/json")
	public ResponseEntity<Void> update(@PathVariable("code") String code, @RequestBody Country country) {
		LOGGER.info("Country update request [id={} | country={}}", resolveIdForLogger(code), country);
		// force the id (use the id provided by the URL)
		country.setCode(code);
		if (countryService.save(country)) {
			LOGGER.info("Country succesfully updated");
			return new ResponseEntity<>(HttpStatus.OK);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	@DeleteMapping("{code}")
	public ResponseEntity<Void> delete(@PathVariable("code") String code) {
		LOGGER.info("Country deletion request : {}", resolveIdForLogger(code));
		if (countryService.delete(code)) {
			LOGGER.info("Country succesfully deleted");
			return new ResponseEntity<>(HttpStatus.NO_CONTENT);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	private String resolveIdForLogger(String code) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(code));
		return ids.toString();
	}

}
