/*
 * Created on 2022-03-14 ( Date ISO 2022-03-14 - Time 18:56:11 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.3.0
*/
package org.demo.controller;

import org.demo.controller.assembler.PublisherResourceAssembler;
import org.demo.controller.resource.PublisherResource;
import org.demo.entity.Publisher;
import org.demo.service.PublisherServiceImpl;
import org.demo.service.criteria.PublisherCriteria;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PagedResourcesAssembler;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * Rest controller which produce Hal+json content (including hateoas metadata).
 * @author Telosys (http://www.telosys.org/) version 3.3.0
 */
@RestController
@RequestMapping(value = "/publisher", produces = "application/hal+json")
public class PublisherController {

	private static final Logger LOGGER = LoggerFactory.getLogger(PublisherController.class);

	private static final String NOT_FOUND ="Publisher not found";

	@Autowired
	private PublisherServiceImpl publisherService;

	@Autowired
	private PagedResourcesAssembler<Publisher> pageAssember;

	private PublisherResourceAssembler publisherResourceAssembler = new PublisherResourceAssembler();

	@GetMapping
	public ResponseEntity<PagedResources<PublisherResource>> search(Pageable pageable, PublisherCriteria criteria) {
		LOGGER.info("Publishers search [pageable={}|PublisherCriteria={}", pageable, criteria);
		final Page<Publisher> result = publisherService.search(pageable, criteria);
		LOGGER.info("Found {} publishers !", result.getSize());
		return new ResponseEntity<>(pageAssember.toResource(result, publisherResourceAssembler), HttpStatus.OK);
	}

	@GetMapping("{code}")
	public ResponseEntity<PublisherResource> get(@PathVariable("code") Integer code) {
		LOGGER.info("Publisher get with id {}", resolveIdForLogger(code));
		final Publisher publisher = publisherService.get(code);
		if (publisher == null) {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>((PublisherResource) null, HttpStatus.NOT_FOUND);
		}
		LOGGER.info("Publisher found : {}", publisher);
		final PublisherResource publisherResource = publisherResourceAssembler.toResource(publisher);
		return new ResponseEntity<>(publisherResource, HttpStatus.OK);
	}

	@PostMapping(consumes = "application/json")
	public ResponseEntity<PublisherResource> create(@RequestBody Publisher publisher) {
		LOGGER.info("Publisher creation request : {}", publisher);
		if (publisherService.exist(publisher)) {
			LOGGER.info("Publisher already exist ! : {}", publisher);
			return new ResponseEntity<>((PublisherResource) null, HttpStatus.CONFLICT);
		} else {
			final Publisher created = publisherService.create(publisher);
			LOGGER.info("Created publisher {}", created);
			return new ResponseEntity<>(publisherResourceAssembler.toResource(created), HttpStatus.OK);
		}
	}

	@PutMapping(value = "{code}", consumes = "application/json")
	public ResponseEntity<Void> update(@PathVariable("code") Integer code, @RequestBody Publisher publisher) {
		LOGGER.info("Publisher update request [id={} | publisher={}}", resolveIdForLogger(code), publisher);
		// force the id (use the id provided by the URL)
		publisher.setCode(code);
		if (publisherService.save(publisher)) {
			LOGGER.info("Publisher succesfully updated");
			return new ResponseEntity<>(HttpStatus.OK);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	@DeleteMapping("{code}")
	public ResponseEntity<Void> delete(@PathVariable("code") Integer code) {
		LOGGER.info("Publisher deletion request : {}", resolveIdForLogger(code));
		if (publisherService.delete(code)) {
			LOGGER.info("Publisher succesfully deleted");
			return new ResponseEntity<>(HttpStatus.NO_CONTENT);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer code) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(code));
		return ids.toString();
	}

}
