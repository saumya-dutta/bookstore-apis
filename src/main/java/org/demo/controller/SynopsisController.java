/*
 * Created on 2022-03-14 ( Date ISO 2022-03-14 - Time 18:56:12 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.3.0
*/
package org.demo.controller;

import org.demo.controller.assembler.SynopsisResourceAssembler;
import org.demo.controller.resource.SynopsisResource;
import org.demo.entity.Synopsis;
import org.demo.service.SynopsisServiceImpl;
import org.demo.service.criteria.SynopsisCriteria;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PagedResourcesAssembler;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * Rest controller which produce Hal+json content (including hateoas metadata).
 * @author Telosys (http://www.telosys.org/) version 3.3.0
 */
@RestController
@RequestMapping(value = "/synopsis", produces = "application/hal+json")
public class SynopsisController {

	private static final Logger LOGGER = LoggerFactory.getLogger(SynopsisController.class);

	private static final String NOT_FOUND ="Synopsis not found";

	@Autowired
	private SynopsisServiceImpl synopsisService;

	@Autowired
	private PagedResourcesAssembler<Synopsis> pageAssember;

	private SynopsisResourceAssembler synopsisResourceAssembler = new SynopsisResourceAssembler();

	@GetMapping
	public ResponseEntity<PagedResources<SynopsisResource>> search(Pageable pageable, SynopsisCriteria criteria) {
		LOGGER.info("Synopsiss search [pageable={}|SynopsisCriteria={}", pageable, criteria);
		final Page<Synopsis> result = synopsisService.search(pageable, criteria);
		LOGGER.info("Found {} synopsiss !", result.getSize());
		return new ResponseEntity<>(pageAssember.toResource(result, synopsisResourceAssembler), HttpStatus.OK);
	}

	@GetMapping("{bookId}")
	public ResponseEntity<SynopsisResource> get(@PathVariable("bookId") Integer bookId) {
		LOGGER.info("Synopsis get with id {}", resolveIdForLogger(bookId));
		final Synopsis synopsis = synopsisService.get(bookId);
		if (synopsis == null) {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>((SynopsisResource) null, HttpStatus.NOT_FOUND);
		}
		LOGGER.info("Synopsis found : {}", synopsis);
		final SynopsisResource synopsisResource = synopsisResourceAssembler.toResource(synopsis);
		return new ResponseEntity<>(synopsisResource, HttpStatus.OK);
	}

	@PostMapping(consumes = "application/json")
	public ResponseEntity<SynopsisResource> create(@RequestBody Synopsis synopsis) {
		LOGGER.info("Synopsis creation request : {}", synopsis);
		if (synopsisService.exist(synopsis)) {
			LOGGER.info("Synopsis already exist ! : {}", synopsis);
			return new ResponseEntity<>((SynopsisResource) null, HttpStatus.CONFLICT);
		} else {
			final Synopsis created = synopsisService.create(synopsis);
			LOGGER.info("Created synopsis {}", created);
			return new ResponseEntity<>(synopsisResourceAssembler.toResource(created), HttpStatus.OK);
		}
	}

	@PutMapping(value = "{bookId}", consumes = "application/json")
	public ResponseEntity<Void> update(@PathVariable("bookId") Integer bookId, @RequestBody Synopsis synopsis) {
		LOGGER.info("Synopsis update request [id={} | synopsis={}}", resolveIdForLogger(bookId), synopsis);
		// force the id (use the id provided by the URL)
		synopsis.setBookId(bookId);
		if (synopsisService.save(synopsis)) {
			LOGGER.info("Synopsis succesfully updated");
			return new ResponseEntity<>(HttpStatus.OK);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	@DeleteMapping("{bookId}")
	public ResponseEntity<Void> delete(@PathVariable("bookId") Integer bookId) {
		LOGGER.info("Synopsis deletion request : {}", resolveIdForLogger(bookId));
		if (synopsisService.delete(bookId)) {
			LOGGER.info("Synopsis succesfully deleted");
			return new ResponseEntity<>(HttpStatus.NO_CONTENT);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer bookId) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(bookId));
		return ids.toString();
	}

}
