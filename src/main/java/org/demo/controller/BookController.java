/*
 * Created on 2022-03-14 ( Date ISO 2022-03-14 - Time 18:56:08 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.3.0
*/
package org.demo.controller;

import org.demo.controller.assembler.BookResourceAssembler;
import org.demo.controller.resource.BookResource;
import org.demo.entity.Book;
import org.demo.service.BookServiceImpl;
import org.demo.service.criteria.BookCriteria;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PagedResourcesAssembler;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * Rest controller which produce Hal+json content (including hateoas metadata).
 * @author Telosys (http://www.telosys.org/) version 3.3.0
 */
@RestController
@RequestMapping(value = "/book", produces = "application/hal+json")
public class BookController {

	private static final Logger LOGGER = LoggerFactory.getLogger(BookController.class);

	private static final String NOT_FOUND ="Book not found";

	@Autowired
	private BookServiceImpl bookService;

	@Autowired
	private PagedResourcesAssembler<Book> pageAssember;

	private BookResourceAssembler bookResourceAssembler = new BookResourceAssembler();

	@GetMapping
	public ResponseEntity<PagedResources<BookResource>> search(Pageable pageable, BookCriteria criteria) {
		LOGGER.info("Books search [pageable={}|BookCriteria={}", pageable, criteria);
		final Page<Book> result = bookService.search(pageable, criteria);
		LOGGER.info("Found {} books !", result.getSize());
		return new ResponseEntity<>(pageAssember.toResource(result, bookResourceAssembler), HttpStatus.OK);
	}

	@GetMapping("{id}")
	public ResponseEntity<BookResource> get(@PathVariable("id") Integer id) {
		LOGGER.info("Book get with id {}", resolveIdForLogger(id));
		final Book book = bookService.get(id);
		if (book == null) {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>((BookResource) null, HttpStatus.NOT_FOUND);
		}
		LOGGER.info("Book found : {}", book);
		final BookResource bookResource = bookResourceAssembler.toResource(book);
		return new ResponseEntity<>(bookResource, HttpStatus.OK);
	}

	@PostMapping(consumes = "application/json")
	public ResponseEntity<BookResource> create(@RequestBody Book book) {
		LOGGER.info("Book creation request : {}", book);
		if (bookService.exist(book)) {
			LOGGER.info("Book already exist ! : {}", book);
			return new ResponseEntity<>((BookResource) null, HttpStatus.CONFLICT);
		} else {
			final Book created = bookService.create(book);
			LOGGER.info("Created book {}", created);
			return new ResponseEntity<>(bookResourceAssembler.toResource(created), HttpStatus.OK);
		}
	}

	@PutMapping(value = "{id}", consumes = "application/json")
	public ResponseEntity<Void> update(@PathVariable("id") Integer id, @RequestBody Book book) {
		LOGGER.info("Book update request [id={} | book={}}", resolveIdForLogger(id), book);
		// force the id (use the id provided by the URL)
		book.setId(id);
		if (bookService.save(book)) {
			LOGGER.info("Book succesfully updated");
			return new ResponseEntity<>(HttpStatus.OK);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	@DeleteMapping("{id}")
	public ResponseEntity<Void> delete(@PathVariable("id") Integer id) {
		LOGGER.info("Book deletion request : {}", resolveIdForLogger(id));
		if (bookService.delete(id)) {
			LOGGER.info("Book succesfully deleted");
			return new ResponseEntity<>(HttpStatus.NO_CONTENT);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer id) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(id));
		return ids.toString();
	}

}
