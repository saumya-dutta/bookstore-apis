/*
 * Created on 2022-03-14 ( Date ISO 2022-03-14 - Time 18:56:08 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.3.0
*/
package org.demo.controller;

import org.demo.controller.assembler.BadgeResourceAssembler;
import org.demo.controller.resource.BadgeResource;
import org.demo.entity.Badge;
import org.demo.service.BadgeServiceImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PagedResourcesAssembler;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * Rest controller which produce Hal+json content (including hateoas metadata).
 * @author Telosys (http://www.telosys.org/) version 3.3.0
 */
@RestController
@RequestMapping(value = "/badge", produces = "application/hal+json")
public class BadgeController {

	private static final Logger LOGGER = LoggerFactory.getLogger(BadgeController.class);

	private static final String NOT_FOUND ="Badge not found";

	@Autowired
	private BadgeServiceImpl badgeService;

	@Autowired
	private PagedResourcesAssembler<Badge> pageAssember;

	private BadgeResourceAssembler badgeResourceAssembler = new BadgeResourceAssembler();

	@GetMapping
	public ResponseEntity<PagedResources<BadgeResource>> search(Pageable pageable) {
		LOGGER.info("Badges search [pageable={}", pageable);
		final Page<Badge> result = badgeService.search(pageable);
		LOGGER.info("Found {} badges !", result.getSize());
		return new ResponseEntity<>(pageAssember.toResource(result, badgeResourceAssembler), HttpStatus.OK);
	}

	@GetMapping("{badgeNumber}")
	public ResponseEntity<BadgeResource> get(@PathVariable("badgeNumber") Integer badgeNumber) {
		LOGGER.info("Badge get with id {}", resolveIdForLogger(badgeNumber));
		final Badge badge = badgeService.get(badgeNumber);
		if (badge == null) {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>((BadgeResource) null, HttpStatus.NOT_FOUND);
		}
		LOGGER.info("Badge found : {}", badge);
		final BadgeResource badgeResource = badgeResourceAssembler.toResource(badge);
		return new ResponseEntity<>(badgeResource, HttpStatus.OK);
	}

	@PostMapping(consumes = "application/json")
	public ResponseEntity<BadgeResource> create(@RequestBody Badge badge) {
		LOGGER.info("Badge creation request : {}", badge);
		if (badgeService.exist(badge)) {
			LOGGER.info("Badge already exist ! : {}", badge);
			return new ResponseEntity<>((BadgeResource) null, HttpStatus.CONFLICT);
		} else {
			final Badge created = badgeService.create(badge);
			LOGGER.info("Created badge {}", created);
			return new ResponseEntity<>(badgeResourceAssembler.toResource(created), HttpStatus.OK);
		}
	}

	@PutMapping(value = "{badgeNumber}", consumes = "application/json")
	public ResponseEntity<Void> update(@PathVariable("badgeNumber") Integer badgeNumber, @RequestBody Badge badge) {
		LOGGER.info("Badge update request [id={} | badge={}}", resolveIdForLogger(badgeNumber), badge);
		// force the id (use the id provided by the URL)
		badge.setBadgeNumber(badgeNumber);
		if (badgeService.save(badge)) {
			LOGGER.info("Badge succesfully updated");
			return new ResponseEntity<>(HttpStatus.OK);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	@DeleteMapping("{badgeNumber}")
	public ResponseEntity<Void> delete(@PathVariable("badgeNumber") Integer badgeNumber) {
		LOGGER.info("Badge deletion request : {}", resolveIdForLogger(badgeNumber));
		if (badgeService.delete(badgeNumber)) {
			LOGGER.info("Badge succesfully deleted");
			return new ResponseEntity<>(HttpStatus.NO_CONTENT);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer badgeNumber) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(badgeNumber));
		return ids.toString();
	}

}
