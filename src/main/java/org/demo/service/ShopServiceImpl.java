/*
 * Created on 2022-03-14 ( Date ISO 2022-03-14 - Time 18:56:12 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.3.0
*/
package org.demo.service;

import javax.persistence.*;


import java.util.ArrayList;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.apache.commons.lang3.StringUtils;
import org.demo.entity.Shop;
import org.demo.repository.ShopRepository;
import org.demo.service.criteria.ShopCriteria;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

/**
 * Service implementation for Shop.
 * @author Telosys (http://www.telosys.org/) version 3.3.0
 */
@Service
public class ShopServiceImpl implements ShopService {

	@Autowired
	private ShopRepository shopRepository;

	@Override
	public Page<Shop> search(Pageable pageable, ShopCriteria criteria) {
		return shopRepository.findAll(new ShopSpecification(criteria), pageable);
	}

	@Override
	public Shop get(String code) {
		return shopRepository.findById(code).orElse(null);
	}

	@Override
	public Boolean delete(String code) {
		if (shopRepository.findById(code) != null) {
			shopRepository.deleteById(code);
			return true;
		}
		return false;
	}

	@Override
	public Shop create(Shop shop) {
		return shopRepository.save(shop);
	}

	@Override
	public Boolean save(Shop shop) {
		final String pk = shop.getCode();
		if (shopRepository.findById(pk) != null) {
			shopRepository.save(shop);
			return true;
		}
		return false;
	}

	@Override
	public Boolean exist(Shop shop) {
		return shopRepository.existsById(shop.getCode());
	}

	class ShopSpecification implements Specification<Shop> {

		private ShopCriteria criteria;

		public ShopSpecification(ShopCriteria criteria) {
			this.criteria = criteria;
		}

		@Override
		public Predicate toPredicate(Root<Shop> root, CriteriaQuery<?> query, CriteriaBuilder builder) {
			final List<Predicate> predicates = new ArrayList<>();
			if (StringUtils.isNotBlank(criteria.getName())) {
				predicates.add(builder.like(builder.lower(root.get("name")),
						criteria.getName().toLowerCase() + "%"));
			}
			if (StringUtils.isNotBlank(criteria.getAddress1())) {
				predicates.add(builder.like(builder.lower(root.get("address1")),
						criteria.getAddress1().toLowerCase() + "%"));
			}
			if (StringUtils.isNotBlank(criteria.getAddress2())) {
				predicates.add(builder.like(builder.lower(root.get("address2")),
						criteria.getAddress2().toLowerCase() + "%"));
			}
			if (StringUtils.isNotBlank(criteria.getCity())) {
				predicates.add(builder.like(builder.lower(root.get("city")),
						criteria.getCity().toLowerCase() + "%"));
			}
			if (StringUtils.isNotBlank(criteria.getCountryCode())) {
				predicates.add(builder.like(builder.lower(root.get("countryCode")),
						criteria.getCountryCode().toLowerCase() + "%"));
			}
			if (StringUtils.isNotBlank(criteria.getPhone())) {
				predicates.add(builder.like(builder.lower(root.get("phone")),
						criteria.getPhone().toLowerCase() + "%"));
			}
			if (StringUtils.isNotBlank(criteria.getEmail())) {
				predicates.add(builder.like(builder.lower(root.get("email")),
						criteria.getEmail().toLowerCase() + "%"));
			}
			if (StringUtils.isNotBlank(criteria.getExecutive())) {
				predicates.add(builder.like(builder.lower(root.get("executive")),
						criteria.getExecutive().toLowerCase() + "%"));
			}
			return andTogether(predicates, builder);
		}

		private Predicate andTogether(List<Predicate> predicates, CriteriaBuilder builder) {
			return builder.and(predicates.toArray(new Predicate[0]));
		}
	}

}

